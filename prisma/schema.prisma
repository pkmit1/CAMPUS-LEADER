generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ------------------- USER & PROFILE MODELS -------------------
//

model User {
  id          Int       @id @default(autoincrement())
  name        String
  email       String    @unique
  password    String
  image       String?   @default("default-avatar.png")
  mobile      String
  location    String?
  role        UserRole  @default(STUDENT) 
  dob         DateTime?
  gender      Gender?
  bloodGroup  String?
  fatherName  String?
  motherName  String?
  skills      String[]
  bio         String?
  githubUrl   String?   
  linkedinUrl String?
  collegeName String?   
  isTempPassword Boolean @default(false) 
  
  // Address relations
  currentAddress    Address?  @relation("UserCurrentAddress", fields: [currentAddressId], references: [id])
  currentAddressId  Int?     
  permanentAddress  Address?  @relation("UserPermanentAddress", fields: [permanentAddressId], references: [id])
  permanentAddressId Int?    

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  otps        Otp[]     
  feeds       Feed[]

  // Project workflow relations
  projectsCreated     Project[]        @relation("ProjectCreator")
  projectResponses    ProjectResponse[] @relation("StudentResponses")
  
  // Assignment relations
  studentAssignments  Assignment[]     @relation("AssignmentStudent")
  adminAssignments    Assignment[]     @relation("AssignmentAdmin")

  @@map("users")
}

model Address {
  id               Int      @id @default(autoincrement())
  street           String?  
  city             String?  
  state            String?  
  pincode          String?  
  country          String?  @default("India")

  // User relations
  currentUsers     User[]   @relation("UserCurrentAddress")
  permanentUsers   User[]   @relation("UserPermanentAddress")

  @@map("addresses")
}

model Otp {
  id        Int      @id @default(autoincrement())
  code      String
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("otps")
}

model Feed {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("feeds")
}

//
// ------------------- PROJECT WORKFLOW MODELS -------------------
//

model Project {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  requirements String?
  
  // Creator info
  createdBy   User      @relation("ProjectCreator", fields: [createdById], references: [id])
  createdById Int
  
  // Project metadata
  status      ProjectStatus @default(DRAFT)
  priority    ProjectPriority @default(MEDIUM)
  deadline    DateTime?
  isActive    Boolean   @default(true)
  
  // Timestamps
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  responses    ProjectResponse[]
  assignments  Assignment[]

  @@map("projects")
}

model ProjectResponse {
  id         Int           @id @default(autoincrement())
  
  // Project relation
  project    Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  Int
  
  // Student relation
  student    User          @relation("StudentResponses", fields: [studentId], references: [id], onDelete: Cascade)
  studentId  Int
  
  // Response details
  status     ResponseStatus @default(PENDING)
  message    String?       
  respondedAt DateTime?    

  @@unique([projectId, studentId])
  @@map("project_responses")
}

model Assignment {
  id           Int      @id @default(autoincrement())
  
  // Project relation
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    Int

  // Student relation
  student      User     @relation("AssignmentStudent", fields: [studentId], references: [id], onDelete: Cascade)
  studentId    Int

  // Admin who assigned
  assignedBy   User     @relation("AssignmentAdmin", fields: [assignedById], references: [id], onDelete: Cascade)
  assignedById Int

  // Assignment details
  status      AssignmentStatus @default(PENDING)
  assignedAt  DateTime @default(now())
  completedAt DateTime?
  notes       String?   
  deadline    DateTime?

  @@unique([projectId, studentId])
  @@map("assignments")
}

//
// ------------------- ENUMS -------------------
//

enum UserRole {
  SUPER_ADMIN
  ADMIN
  LEADER
  CAMPUS_ADMINISTRATOR
  STUDENT
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}



enum ProjectStatus {
  DRAFT
  PENDING_REVIEW
  ACTIVE
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum ProjectPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ResponseStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum AssignmentStatus {
  PENDING
  ACTIVE
  IN_PROGRESS
  UNDER_REVIEW
  COMPLETED
  CANCELLED
  EXTENDED
}


